//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Parlis.Client.Services {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Parlis.Server.Service.Data")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaternalSurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaternalSurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerProfileUsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaternalSurname {
            get {
                return this.MaternalSurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.MaternalSurnameField, value) != true)) {
                    this.MaternalSurnameField = value;
                    this.RaisePropertyChanged("MaternalSurname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaternalSurname {
            get {
                return this.PaternalSurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.PaternalSurnameField, value) != true)) {
                    this.PaternalSurnameField = value;
                    this.RaisePropertyChanged("PaternalSurname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerProfileUsername {
            get {
                return this.PlayerProfileUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerProfileUsernameField, value) != true)) {
                    this.PlayerProfileUsernameField = value;
                    this.RaisePropertyChanged("PlayerProfileUsername");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerProfile", Namespace="http://schemas.datacontract.org/2004/07/Parlis.Server.Service.Data")]
    [System.SerializableAttribute()]
    public partial class PlayerProfile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsVerifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsVerified {
            get {
                return this.IsVerifiedField;
            }
            set {
                if ((this.IsVerifiedField.Equals(value) != true)) {
                    this.IsVerifiedField = value;
                    this.RaisePropertyChanged("IsVerified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IPlayerProfileManagement")]
    public interface IPlayerProfileManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/CheckPlayerExistence", ReplyAction="http://tempuri.org/IPlayerProfileManagement/CheckPlayerExistenceResponse")]
        bool CheckPlayerExistence(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/CheckPlayerExistence", ReplyAction="http://tempuri.org/IPlayerProfileManagement/CheckPlayerExistenceResponse")]
        System.Threading.Tasks.Task<bool> CheckPlayerExistenceAsync(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/CheckPlayerProfileExistence", ReplyAction="http://tempuri.org/IPlayerProfileManagement/CheckPlayerProfileExistenceResponse")]
        bool CheckPlayerProfileExistence(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/CheckPlayerProfileExistence", ReplyAction="http://tempuri.org/IPlayerProfileManagement/CheckPlayerProfileExistenceResponse")]
        System.Threading.Tasks.Task<bool> CheckPlayerProfileExistenceAsync(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/DeletePlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/DeletePlayerResponse")]
        bool DeletePlayer(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/DeletePlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/DeletePlayerResponse")]
        System.Threading.Tasks.Task<bool> DeletePlayerAsync(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/DeletePlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/DeletePlayerProfileResponse")]
        bool DeletePlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/DeletePlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/DeletePlayerProfileResponse")]
        System.Threading.Tasks.Task<bool> DeletePlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/GetPlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/GetPlayerResponse")]
        Parlis.Client.Services.Player GetPlayer(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/GetPlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/GetPlayerResponse")]
        System.Threading.Tasks.Task<Parlis.Client.Services.Player> GetPlayerAsync(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/Login", ReplyAction="http://tempuri.org/IPlayerProfileManagement/LoginResponse")]
        Parlis.Client.Services.PlayerProfile Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/Login", ReplyAction="http://tempuri.org/IPlayerProfileManagement/LoginResponse")]
        System.Threading.Tasks.Task<Parlis.Client.Services.PlayerProfile> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerResponse")]
        bool RegisterPlayer(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerAsync(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerProfileResponse")]
        bool RegisterPlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerProfileResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/SendMail", ReplyAction="http://tempuri.org/IPlayerProfileManagement/SendMailResponse")]
        bool SendMail(Parlis.Client.Services.PlayerProfile playerProfile, string title, string message, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/SendMail", ReplyAction="http://tempuri.org/IPlayerProfileManagement/SendMailResponse")]
        System.Threading.Tasks.Task<bool> SendMailAsync(Parlis.Client.Services.PlayerProfile playerProfile, string title, string message, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/UpdatePlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerResponse")]
        bool UpdatePlayer(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/UpdatePlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerAsync(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerProfileResponse")]
        bool UpdatePlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerProfileResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerProfileManagementChannel : Parlis.Client.Services.IPlayerProfileManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerProfileManagementClient : System.ServiceModel.ClientBase<Parlis.Client.Services.IPlayerProfileManagement>, Parlis.Client.Services.IPlayerProfileManagement {
        
        public PlayerProfileManagementClient() {
        }
        
        public PlayerProfileManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerProfileManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerProfileManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerProfileManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckPlayerExistence(Parlis.Client.Services.Player player) {
            return base.Channel.CheckPlayerExistence(player);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPlayerExistenceAsync(Parlis.Client.Services.Player player) {
            return base.Channel.CheckPlayerExistenceAsync(player);
        }
        
        public bool CheckPlayerProfileExistence(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.CheckPlayerProfileExistence(playerProfile);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPlayerProfileExistenceAsync(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.CheckPlayerProfileExistenceAsync(playerProfile);
        }
        
        public bool DeletePlayer(Parlis.Client.Services.Player player) {
            return base.Channel.DeletePlayer(player);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlayerAsync(Parlis.Client.Services.Player player) {
            return base.Channel.DeletePlayerAsync(player);
        }
        
        public bool DeletePlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.DeletePlayerProfile(playerProfile);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.DeletePlayerProfileAsync(playerProfile);
        }
        
        public Parlis.Client.Services.Player GetPlayer(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.GetPlayer(playerProfile);
        }
        
        public System.Threading.Tasks.Task<Parlis.Client.Services.Player> GetPlayerAsync(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.GetPlayerAsync(playerProfile);
        }
        
        public Parlis.Client.Services.PlayerProfile Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<Parlis.Client.Services.PlayerProfile> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool RegisterPlayer(Parlis.Client.Services.Player player) {
            return base.Channel.RegisterPlayer(player);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerAsync(Parlis.Client.Services.Player player) {
            return base.Channel.RegisterPlayerAsync(player);
        }
        
        public bool RegisterPlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.RegisterPlayerProfile(playerProfile);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.RegisterPlayerProfileAsync(playerProfile);
        }
        
        public bool SendMail(Parlis.Client.Services.PlayerProfile playerProfile, string title, string message, int code) {
            return base.Channel.SendMail(playerProfile, title, message, code);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailAsync(Parlis.Client.Services.PlayerProfile playerProfile, string title, string message, int code) {
            return base.Channel.SendMailAsync(playerProfile, title, message, code);
        }
        
        public bool UpdatePlayer(Parlis.Client.Services.Player player) {
            return base.Channel.UpdatePlayer(player);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerAsync(Parlis.Client.Services.Player player) {
            return base.Channel.UpdatePlayerAsync(player);
        }
        
        public bool UpdatePlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.UpdatePlayerProfile(playerProfile);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.UpdatePlayerProfileAsync(playerProfile);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IMatchManagement")]
    public interface IMatchManagement {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/Connect")]
        void Connect(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/Connect")]
        System.Threading.Tasks.Task ConnectAsync(Parlis.Client.Services.PlayerProfile playerProfile);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagementChannel : Parlis.Client.Services.IMatchManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchManagementClient : System.ServiceModel.ClientBase<Parlis.Client.Services.IMatchManagement>, Parlis.Client.Services.IMatchManagement {
        
        public MatchManagementClient() {
        }
        
        public MatchManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MatchManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Connect(Parlis.Client.Services.PlayerProfile playerProfile) {
            base.Channel.Connect(playerProfile);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.ConnectAsync(playerProfile);
        }
    }
}
