//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Parlis.Client.Services {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Parlis.Server.Service.Data")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerProfileUsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerProfileUsername {
            get {
                return this.PlayerProfileUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerProfileUsernameField, value) != true)) {
                    this.PlayerProfileUsernameField = value;
                    this.RaisePropertyChanged("PlayerProfileUsername");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Parlis.Server.Service.Data")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaternalSurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PaternalSurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerProfileUsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaternalSurname {
            get {
                return this.MaternalSurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.MaternalSurnameField, value) != true)) {
                    this.MaternalSurnameField = value;
                    this.RaisePropertyChanged("MaternalSurname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PaternalSurname {
            get {
                return this.PaternalSurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.PaternalSurnameField, value) != true)) {
                    this.PaternalSurnameField = value;
                    this.RaisePropertyChanged("PaternalSurname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerProfileUsername {
            get {
                return this.PlayerProfileUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerProfileUsernameField, value) != true)) {
                    this.PlayerProfileUsernameField = value;
                    this.RaisePropertyChanged("PlayerProfileUsername");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerProfile", Namespace="http://schemas.datacontract.org/2004/07/Parlis.Server.Service.Data")]
    [System.SerializableAttribute()]
    public partial class PlayerProfile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVerifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVerified {
            get {
                return this.IsVerifiedField;
            }
            set {
                if ((this.IsVerifiedField.Equals(value) != true)) {
                    this.IsVerifiedField = value;
                    this.RaisePropertyChanged("IsVerified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Coin", Namespace="http://schemas.datacontract.org/2004/07/Parlis.Server.Service.Data")]
    [System.SerializableAttribute()]
    public partial class Coin : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColorTeamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerProfileUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ColorTeam {
            get {
                return this.ColorTeamField;
            }
            set {
                if ((this.ColorTeamField.Equals(value) != true)) {
                    this.ColorTeamField = value;
                    this.RaisePropertyChanged("ColorTeam");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerProfileUsername {
            get {
                return this.PlayerProfileUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerProfileUsernameField, value) != true)) {
                    this.PlayerProfileUsernameField = value;
                    this.RaisePropertyChanged("PlayerProfileUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IChatManagement", CallbackContract=typeof(Parlis.Client.Services.IChatManagementCallback))]
    public interface IChatManagement {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManagement/ConnectToChat")]
        void ConnectToChat(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManagement/ConnectToChat")]
        System.Threading.Tasks.Task ConnectToChatAsync(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManagement/DisconnectFromChat", ReplyAction="http://tempuri.org/IChatManagement/DisconnectFromChatResponse")]
        void DisconnectFromChat(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManagement/DisconnectFromChat", ReplyAction="http://tempuri.org/IChatManagement/DisconnectFromChatResponse")]
        System.Threading.Tasks.Task DisconnectFromChatAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManagement/SendMessage")]
        void SendMessage(int code, Parlis.Client.Services.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManagement/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(int code, Parlis.Client.Services.Message message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagementCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManagement/ReceiveMessages", ReplyAction="http://tempuri.org/IChatManagement/ReceiveMessagesResponse")]
        void ReceiveMessages(Parlis.Client.Services.Message[] messages);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagementChannel : Parlis.Client.Services.IChatManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatManagementClient : System.ServiceModel.DuplexClientBase<Parlis.Client.Services.IChatManagement>, Parlis.Client.Services.IChatManagement {
        
        public ChatManagementClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagementClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToChat(string username, int code) {
            base.Channel.ConnectToChat(username, code);
        }
        
        public System.Threading.Tasks.Task ConnectToChatAsync(string username, int code) {
            return base.Channel.ConnectToChatAsync(username, code);
        }
        
        public void DisconnectFromChat(string username) {
            base.Channel.DisconnectFromChat(username);
        }
        
        public System.Threading.Tasks.Task DisconnectFromChatAsync(string username) {
            return base.Channel.DisconnectFromChatAsync(username);
        }
        
        public void SendMessage(int code, Parlis.Client.Services.Message message) {
            base.Channel.SendMessage(code, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(int code, Parlis.Client.Services.Message message) {
            return base.Channel.SendMessageAsync(code, message);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IMatchManagement", CallbackContract=typeof(Parlis.Client.Services.IMatchManagementCallback))]
    public interface IMatchManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManagement/CheckMatchExistence", ReplyAction="http://tempuri.org/IMatchManagement/CheckMatchExistenceResponse")]
        bool CheckMatchExistence(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManagement/CheckMatchExistence", ReplyAction="http://tempuri.org/IMatchManagement/CheckMatchExistenceResponse")]
        System.Threading.Tasks.Task<bool> CheckMatchExistenceAsync(int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/ConnectToMatch")]
        void ConnectToMatch(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/ConnectToMatch")]
        System.Threading.Tasks.Task ConnectToMatchAsync(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManagement/CreateMatch", ReplyAction="http://tempuri.org/IMatchManagement/CreateMatchResponse")]
        void CreateMatch(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManagement/CreateMatch", ReplyAction="http://tempuri.org/IMatchManagement/CreateMatchResponse")]
        System.Threading.Tasks.Task CreateMatchAsync(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManagement/DisconnectFromMatch", ReplyAction="http://tempuri.org/IMatchManagement/DisconnectFromMatchResponse")]
        void DisconnectFromMatch(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManagement/DisconnectFromMatch", ReplyAction="http://tempuri.org/IMatchManagement/DisconnectFromMatchResponse")]
        System.Threading.Tasks.Task DisconnectFromMatchAsync(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/GetPlayerProfiles")]
        void GetPlayerProfiles(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/GetPlayerProfiles")]
        System.Threading.Tasks.Task GetPlayerProfilesAsync(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/SetBoardMatch")]
        void SetBoardMatch();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchManagement/SetBoardMatch")]
        System.Threading.Tasks.Task SetBoardMatchAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagementCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManagement/ReceivePlayerProfiles", ReplyAction="http://tempuri.org/IMatchManagement/ReceivePlayerProfilesResponse")]
        void ReceivePlayerProfiles(string[] playerProfiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchManagement/StarMatch", ReplyAction="http://tempuri.org/IMatchManagement/StarMatchResponse")]
        void StarMatch();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchManagementChannel : Parlis.Client.Services.IMatchManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchManagementClient : System.ServiceModel.DuplexClientBase<Parlis.Client.Services.IMatchManagement>, Parlis.Client.Services.IMatchManagement {
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchManagementClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool CheckMatchExistence(int code) {
            return base.Channel.CheckMatchExistence(code);
        }
        
        public System.Threading.Tasks.Task<bool> CheckMatchExistenceAsync(int code) {
            return base.Channel.CheckMatchExistenceAsync(code);
        }
        
        public void ConnectToMatch(string username, int code) {
            base.Channel.ConnectToMatch(username, code);
        }
        
        public System.Threading.Tasks.Task ConnectToMatchAsync(string username, int code) {
            return base.Channel.ConnectToMatchAsync(username, code);
        }
        
        public void CreateMatch(int code) {
            base.Channel.CreateMatch(code);
        }
        
        public System.Threading.Tasks.Task CreateMatchAsync(int code) {
            return base.Channel.CreateMatchAsync(code);
        }
        
        public void DisconnectFromMatch(string username, int code) {
            base.Channel.DisconnectFromMatch(username, code);
        }
        
        public System.Threading.Tasks.Task DisconnectFromMatchAsync(string username, int code) {
            return base.Channel.DisconnectFromMatchAsync(username, code);
        }
        
        public void GetPlayerProfiles(string username, int code) {
            base.Channel.GetPlayerProfiles(username, code);
        }
        
        public System.Threading.Tasks.Task GetPlayerProfilesAsync(string username, int code) {
            return base.Channel.GetPlayerProfilesAsync(username, code);
        }
        
        public void SetBoardMatch() {
            base.Channel.SetBoardMatch();
        }
        
        public System.Threading.Tasks.Task SetBoardMatchAsync() {
            return base.Channel.SetBoardMatchAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IPlayerProfileManagement")]
    public interface IPlayerProfileManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/CheckPlayerExistence", ReplyAction="http://tempuri.org/IPlayerProfileManagement/CheckPlayerExistenceResponse")]
        bool CheckPlayerExistence(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/CheckPlayerExistence", ReplyAction="http://tempuri.org/IPlayerProfileManagement/CheckPlayerExistenceResponse")]
        System.Threading.Tasks.Task<bool> CheckPlayerExistenceAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/CheckPlayerProfileExistence", ReplyAction="http://tempuri.org/IPlayerProfileManagement/CheckPlayerProfileExistenceResponse")]
        bool CheckPlayerProfileExistence(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/CheckPlayerProfileExistence", ReplyAction="http://tempuri.org/IPlayerProfileManagement/CheckPlayerProfileExistenceResponse")]
        System.Threading.Tasks.Task<bool> CheckPlayerProfileExistenceAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/DeletePlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/DeletePlayerResponse")]
        bool DeletePlayer(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/DeletePlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/DeletePlayerResponse")]
        System.Threading.Tasks.Task<bool> DeletePlayerAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/DeletePlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/DeletePlayerProfileResponse")]
        bool DeletePlayerProfile(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/DeletePlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/DeletePlayerProfileResponse")]
        System.Threading.Tasks.Task<bool> DeletePlayerProfileAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/GetPlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/GetPlayerResponse")]
        Parlis.Client.Services.Player GetPlayer(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/GetPlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/GetPlayerResponse")]
        System.Threading.Tasks.Task<Parlis.Client.Services.Player> GetPlayerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/GetPlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/GetPlayerProfileResponse")]
        Parlis.Client.Services.PlayerProfile GetPlayerProfile(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/GetPlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/GetPlayerProfileResponse")]
        System.Threading.Tasks.Task<Parlis.Client.Services.PlayerProfile> GetPlayerProfileAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/Login", ReplyAction="http://tempuri.org/IPlayerProfileManagement/LoginResponse")]
        Parlis.Client.Services.PlayerProfile Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/Login", ReplyAction="http://tempuri.org/IPlayerProfileManagement/LoginResponse")]
        System.Threading.Tasks.Task<Parlis.Client.Services.PlayerProfile> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerResponse")]
        bool RegisterPlayer(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerAsync(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerProfileResponse")]
        bool RegisterPlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/RegisterPlayerProfileResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/SendMail", ReplyAction="http://tempuri.org/IPlayerProfileManagement/SendMailResponse")]
        bool SendMail(string username, string title, string message, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/SendMail", ReplyAction="http://tempuri.org/IPlayerProfileManagement/SendMailResponse")]
        System.Threading.Tasks.Task<bool> SendMailAsync(string username, string title, string message, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/UpdatePlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerResponse")]
        bool UpdatePlayer(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/UpdatePlayer", ReplyAction="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerAsync(Parlis.Client.Services.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerProfileResponse")]
        bool UpdatePlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerProfile", ReplyAction="http://tempuri.org/IPlayerProfileManagement/UpdatePlayerProfileResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerProfileManagementChannel : Parlis.Client.Services.IPlayerProfileManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerProfileManagementClient : System.ServiceModel.ClientBase<Parlis.Client.Services.IPlayerProfileManagement>, Parlis.Client.Services.IPlayerProfileManagement {
        
        public PlayerProfileManagementClient() {
        }
        
        public PlayerProfileManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerProfileManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerProfileManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerProfileManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckPlayerExistence(string emailAddress) {
            return base.Channel.CheckPlayerExistence(emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPlayerExistenceAsync(string emailAddress) {
            return base.Channel.CheckPlayerExistenceAsync(emailAddress);
        }
        
        public bool CheckPlayerProfileExistence(string username) {
            return base.Channel.CheckPlayerProfileExistence(username);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPlayerProfileExistenceAsync(string username) {
            return base.Channel.CheckPlayerProfileExistenceAsync(username);
        }
        
        public bool DeletePlayer(string emailAddress) {
            return base.Channel.DeletePlayer(emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlayerAsync(string emailAddress) {
            return base.Channel.DeletePlayerAsync(emailAddress);
        }
        
        public bool DeletePlayerProfile(string username) {
            return base.Channel.DeletePlayerProfile(username);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlayerProfileAsync(string username) {
            return base.Channel.DeletePlayerProfileAsync(username);
        }
        
        public Parlis.Client.Services.Player GetPlayer(string username) {
            return base.Channel.GetPlayer(username);
        }
        
        public System.Threading.Tasks.Task<Parlis.Client.Services.Player> GetPlayerAsync(string username) {
            return base.Channel.GetPlayerAsync(username);
        }
        
        public Parlis.Client.Services.PlayerProfile GetPlayerProfile(string emailAddress) {
            return base.Channel.GetPlayerProfile(emailAddress);
        }
        
        public System.Threading.Tasks.Task<Parlis.Client.Services.PlayerProfile> GetPlayerProfileAsync(string emailAddress) {
            return base.Channel.GetPlayerProfileAsync(emailAddress);
        }
        
        public Parlis.Client.Services.PlayerProfile Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<Parlis.Client.Services.PlayerProfile> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool RegisterPlayer(Parlis.Client.Services.Player player) {
            return base.Channel.RegisterPlayer(player);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerAsync(Parlis.Client.Services.Player player) {
            return base.Channel.RegisterPlayerAsync(player);
        }
        
        public bool RegisterPlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.RegisterPlayerProfile(playerProfile);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.RegisterPlayerProfileAsync(playerProfile);
        }
        
        public bool SendMail(string username, string title, string message, int code) {
            return base.Channel.SendMail(username, title, message, code);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailAsync(string username, string title, string message, int code) {
            return base.Channel.SendMailAsync(username, title, message, code);
        }
        
        public bool UpdatePlayer(Parlis.Client.Services.Player player) {
            return base.Channel.UpdatePlayer(player);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerAsync(Parlis.Client.Services.Player player) {
            return base.Channel.UpdatePlayerAsync(player);
        }
        
        public bool UpdatePlayerProfile(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.UpdatePlayerProfile(playerProfile);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerProfileAsync(Parlis.Client.Services.PlayerProfile playerProfile) {
            return base.Channel.UpdatePlayerProfileAsync(playerProfile);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IGameManagement", CallbackContract=typeof(Parlis.Client.Services.IGameManagementCallback))]
    public interface IGameManagement {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/ConnectToBoard")]
        void ConnectToBoard(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/ConnectToBoard")]
        System.Threading.Tasks.Task ConnectToBoardAsync(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagement/DisconnectFromBoard", ReplyAction="http://tempuri.org/IGameManagement/DisconnectFromBoardResponse")]
        void DisconnectFromBoard(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagement/DisconnectFromBoard", ReplyAction="http://tempuri.org/IGameManagement/DisconnectFromBoardResponse")]
        System.Threading.Tasks.Task DisconnectFromBoardAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/SendMove")]
        void SendMove(int result, Parlis.Client.Services.Coin coin);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/SendMove")]
        System.Threading.Tasks.Task SendMoveAsync(int result, Parlis.Client.Services.Coin coin);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/GetPlayerProfilesForBoard")]
        void GetPlayerProfilesForBoard(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/GetPlayerProfilesForBoard")]
        System.Threading.Tasks.Task GetPlayerProfilesForBoardAsync(string username, int code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/SetDiceResult")]
        void SetDiceResult();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/SetDiceResult")]
        System.Threading.Tasks.Task SetDiceResultAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/StartGame")]
        void StartGame();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManagement/StartGame")]
        System.Threading.Tasks.Task StartGameAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagementCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagement/ReceiveMove", ReplyAction="http://tempuri.org/IGameManagement/ReceiveMoveResponse")]
        void ReceiveMove(Parlis.Client.Services.Coin coin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagement/ReceivePlayerProfilesForBoard", ReplyAction="http://tempuri.org/IGameManagement/ReceivePlayerProfilesForBoardResponse")]
        void ReceivePlayerProfilesForBoard(System.Collections.Generic.Dictionary<string, int> playerProfilesTurns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagement/ShowDiceResult", ReplyAction="http://tempuri.org/IGameManagement/ShowDiceResultResponse")]
        void ShowDiceResult(int result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManagement/ShowNextTurn", ReplyAction="http://tempuri.org/IGameManagement/ShowNextTurnResponse")]
        void ShowNextTurn(int turn);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagementChannel : Parlis.Client.Services.IGameManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameManagementClient : System.ServiceModel.DuplexClientBase<Parlis.Client.Services.IGameManagement>, Parlis.Client.Services.IGameManagement {
        
        public GameManagementClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagementClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagementClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToBoard(string username, int code) {
            base.Channel.ConnectToBoard(username, code);
        }
        
        public System.Threading.Tasks.Task ConnectToBoardAsync(string username, int code) {
            return base.Channel.ConnectToBoardAsync(username, code);
        }
        
        public void DisconnectFromBoard(string username) {
            base.Channel.DisconnectFromBoard(username);
        }
        
        public System.Threading.Tasks.Task DisconnectFromBoardAsync(string username) {
            return base.Channel.DisconnectFromBoardAsync(username);
        }
        
        public void SendMove(int result, Parlis.Client.Services.Coin coin) {
            base.Channel.SendMove(result, coin);
        }
        
        public System.Threading.Tasks.Task SendMoveAsync(int result, Parlis.Client.Services.Coin coin) {
            return base.Channel.SendMoveAsync(result, coin);
        }
        
        public void GetPlayerProfilesForBoard(string username, int code) {
            base.Channel.GetPlayerProfilesForBoard(username, code);
        }
        
        public System.Threading.Tasks.Task GetPlayerProfilesForBoardAsync(string username, int code) {
            return base.Channel.GetPlayerProfilesForBoardAsync(username, code);
        }
        
        public void SetDiceResult() {
            base.Channel.SetDiceResult();
        }
        
        public System.Threading.Tasks.Task SetDiceResultAsync() {
            return base.Channel.SetDiceResultAsync();
        }
        
        public void StartGame() {
            base.Channel.StartGame();
        }
        
        public System.Threading.Tasks.Task StartGameAsync() {
            return base.Channel.StartGameAsync();
        }
    }
}
